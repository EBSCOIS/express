# Copyright (c) 2017 Platform9 Systems

from setupd.tasks import app as celery_app
from flask import Flask, request, Response, jsonify
import json
import subprocess
import MySQLdb
from setupd.fts import create_and_verify_db_connection


app = Flask(__name__)

TASK_REGISTRY = None


def get_working_creds(params):
    errors = []

    db_host = params.get('db_host', None)
    if not db_host:
        errors.append('Missing database hostname')

    db_port = None
    try:
        db_port = int(params.get('db_port', '3306'))
        if db_port < 1 or db_port > 65535:
            raise ValueError('db_port')
    except ValueError:
        errors.append('Port number is not valid')

    db_user = params.get('db_user', None)
    if not db_user:
        errors.append('Missing database user')

    db_password = params.get('db_password', None)
    if not db_password:
        errors.append('Missing database password')

    if errors:
        return None, errors

    try:
        conn = create_and_verify_db_connection(
                db_host, db_port, db_user, db_password)
        return conn, []
    except MySQLdb.OperationalError as (err_code, err_msg):
        if err_code == 1045:
            errors.append('Invalid username/password')
        else:
            errors.append(
                'Cannot connect to database (MySQL error code %d)' % \
                err_code)
    except Exception as ex:
        errors.append(str(ex))

    return None, errors


@app.route('/checkdb', methods=['POST'])
def configure_check_db():
    if request.is_json:
        params = request.get_json()
    else:
        params = request.form

    sql_conn, errors = \
        get_working_creds(params)

    if errors:
        return jsonify({
                'errors': errors
            }), 400

    # XXX check for database/table presence
    # XXX load DU metadata and cert info


@app.route('/init', methods=['POST'])
def configure_init():
    # XXX compare params with what's in db
    # XXX launch ansible in background
    pass


@app.route('/progress', methods=['GET'])
def configure_progress():
    if not TASK_REGISTRY:
        return jsonify({})
