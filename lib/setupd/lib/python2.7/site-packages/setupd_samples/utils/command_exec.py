# Copyright (c) 2018 Platform9 Systems

# A utility class to execute commands by calling subprocess and utilities
# it also logs the output of the subprocess to the log file
# TODO: odd enough communicate returns a string for the stdout, expected a stream,
# this can be disastrous for large output

import subprocess, shlex, logging, cStringIO

LOG = logging.getLogger(__name__)

def call(command_line):
    command_line_args = shlex.split(command_line)

    LOG.info('Subprocess: "' + command_line + '"')
    LOG.info('------------------------------\n')
    try:
        command_line_process = subprocess.Popen(
            command_line_args,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
        )
        # since the stderr is duped to stdout, just care about
        # the stdout
        process_stdout, _ = command_line_process.communicate()
        _log_subprocess_output(cStringIO.StringIO(process_stdout))
    except (OSError, subprocess.CalledProcessError) as exception:
        LOG.exception('Exception occured: ' + str(exception))
        LOG.error('Subprocess errored out')
        return False
    LOG.info('------------------------------\n')
    LOG.info('Subprocess finished')
    return True

def _log_subprocess_output(pipe):
    for line in iter(pipe.readline, b''): # b'\n'-separated lines
        LOG.info('subprocess: %r', line)