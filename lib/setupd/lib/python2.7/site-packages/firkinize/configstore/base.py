# Copyright (c) 2017 Platform9 systems. All rights reserved

class ConfigWatch(object):

    def run(self):
        raise NotImplementedError

class TransactionRollback(Exception):
    def __init__(self, what):
        super(TransactionRollback, self).__init__(what)

class ConfigStore(object):

    def kv_get_prefix(self, prefix):
        """
        Get all values beginning with a prefix. Returns a flat dictionary
        of key -> value.
        """
        raise NotImplementedError

    def kv_get(self, key):
        """
        Get a single value
        """
        raise NotImplementedError

    def kv_put(self, key, value, overwrite=True):
        """
        Put a single value. Overwrites by default. Returns True if the
        value was written.
        """
        raise NotImplementedError

    def kv_put_dict(self, data):
        """
        Flatten and put a dictionary. Overwrites always.
        """
        raise NotImplementedError

    def kv_put_txn(self, updates, modifyIndex=None):
        """
        Set a set of values from a dictionary atomically.
        """
        raise NotImplementedError

    def do_txn(self, updates):
        """
        Atomically send a collection of updates to the config store. Format
        of 'updates' depends on the implementation.
        """
        raise NotImplementedError

    def prefix_watch(self, prefix, callback, run_at_startup=True):
        """
        Fetch an instance of an class with a run() method (ideally subclassing
        ConfigWatch above), that watches a set of keys and calls a callback on
        update.
        """
        raise NotImplementedError
