# Copyright (c) 2018 Platform9 systems. All rights reserved

from contextlib import contextmanager
import time
import os
import logging
from os import path
from subprocess import Popen
from tempfile import mkdtemp
from string import Template

LOG = logging.getLogger(__name__)

def get_stunnel_path_from_env():
    stunnel_path = os.getenv('STUNNEL_PATH')
    if not stunnel_path:
        raise Exception('STUNNEL_PATH not defined')
    return stunnel_path

# spawns an stunnel process with specified configuration and output directory.
# designed to be used with "with" statement.
@contextmanager
def stunnel(stunnel_path, stunnel_conf_path, output_dir):
    output_path = path.join(output_dir, 'stunnel.log')
    with open(output_path, 'w') as f:
        popen = Popen([stunnel_path, stunnel_conf_path], stdout=f, stderr=f)
        LOG.info('popen process pid: %s and log: %s', popen.pid, output_path)
        try:
            time.sleep(2) # for race condition connecting to the local port
            yield popen
        finally:
            popen.terminate()


# creates an stunnel configuration file in a temporary directory
def generate_stunnel_config(fqdn, svc_name, svc_port,
                            ca_cert, client_cert, client_key):
    tmp_dir = mkdtemp(fqdn)
    with open(path.join(tmp_dir, 'ca.pem'), 'w') as f:
        f.write(ca_cert)
    with open(path.join(tmp_dir, 'cert.pem'), 'w') as f:
        f.write(client_cert)
    with open(path.join(tmp_dir, 'key.pem'), 'w') as f:
        f.write(client_key)
    template = """
socket=l:TCP_NODELAY=1
socket=r:TCP_NODELAY=1

debug=7
# output=/dev/stdout
foreground=yes

[app]
client=yes
accept=${svc_port}
connect=${fqdn}:443
sni=${svc_name}.${fqdn}
# checkHost = ${svc_name}.${fqdn}
cert=${tmp_dir}/cert.pem
key=${tmp_dir}/key.pem
verifyChain=yes
CAfile=${tmp_dir}/ca.pem
"""
    tmpl = Template(template=template)
    conf = tmpl.substitute({}, fqdn=fqdn, svc_name=svc_name,
                           svc_port=svc_port, tmp_dir=tmp_dir)
    stunnel_conf_path = path.join(tmp_dir, 'stunnel.conf')
    with open(stunnel_conf_path, 'w') as f:
        f.write(conf)
    return tmp_dir, stunnel_conf_path
