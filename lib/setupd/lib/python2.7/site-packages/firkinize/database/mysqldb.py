
import logging
import MySQLdb

LOG = logging.getLogger(__name__)

class MySqlDatabase(object):
    def __init__(self, host, port, admin_user, admin_pass):
        """
        An class to create databases and add grants.
        """
        self._admin_conn = MySQLdb.connect(host=host, port=port,
                                           user=admin_user, passwd=admin_pass)
        self._host = host
        self._port = port

    def close(self):
        self._admin_conn.close()

    def check_create_db(self, db_name):
        """
        Create a database if it's not there already.
        :param db_name: the name of the database
        :returns: True if created
        """
        cursor = self._admin_conn.cursor()
        try:
            cursor.execute('SHOW DATABASES LIKE %s', (db_name,))
            if not cursor.fetchall():
                LOG.info('Creating database %s', db_name)
                cursor.execute('CREATE DATABASE %s' % db_name)
                return True
            else:
                LOG.info('No need to create database %s', db_name)
                return False
        finally:
            cursor.close()

    def check_add_grants(self, db_name, db_user, db_pass):
        """
        Add grants for the database server host, localhost and '%' for the
        specified user. Calls are always made but have no effect if the grant
        is already there.
        :returns: True if there's a change.
        """
        cursor = self._admin_conn.cursor()
        try:
            # get the mysql server's hostname
            cursor.execute('SELECT @@hostname')
            hostname = cursor.fetchall()[0][0]
            updated = False
            for host in ['localhost', '%', hostname]:
                try:
                    cursor.execute('SHOW GRANTS FOR %s@%s', (db_user, host))
                    before_grants = cursor.fetchall()
                except MySQLdb.OperationalError as e:
                    LOG.debug('Failed to get grants for %s@%s: %s', db_user,
                              host, e)
                    before_grants = ()
                grant_query = 'GRANT ALL PRIVILEGES ON %s.* TO %%s@%%s ' \
                              'IDENTIFIED BY %%s' % db_name
                cursor.execute(grant_query, (db_user, host, db_pass))
                cursor.fetchall()
                cursor.execute('SHOW GRANTS FOR %s@%s', (db_user, host))
                after_grants = cursor.fetchall()

                if sorted(before_grants) == sorted(after_grants):
                    LOG.info('No change to privilege grant for %s@%s', db_user, host)
                else:
                    LOG.info('Grant changed for %s@%s', db_user, host)
                    updated = True
            return updated
        finally:
            cursor.close()

