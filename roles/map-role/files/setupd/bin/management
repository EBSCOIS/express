#!/opt/pf9/setupd/bin/python2
# Copyright (c) 2018 Platform9 Systems

# A script that reads the required configuration files and
# prepares the host by installing the pf9_setup and configuring
# the default Cluster


import sys, logging, yaml
from setupd_samples.utils import command_exec
from setupd_samples.utils.pf9_mgmt_setup import mgmt_cluster_create
from setupd_samples.utils import get_misc_dir, setup_logs
import argparse

LOG = logging.getLogger(__name__)


def _parse_args():
    ap = argparse.ArgumentParser(sys.argv[0],
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    ap.add_argument('--mgmt-ip', required=True, dest='mgmt_ip',
                    help='External IP of the host to be used')
    return ap.parse_args()

def _run_setupd(vendor_name, db_user, db_host, db_password, default_user, default_password, fqdn, cluster_name, master_fqdn):
    print "Starting basic services"
    command_exec.call (
        "/opt/pf9/setupd/bin/pf9_setup.py --fullname {vendor_name} --shortname {vendor_name} --fqdn {fqdn} --admin-user {default_user} --admin-password {default_password} --db-host {db_host} --db-user {db_user} --db-password {db_password} --region default".format(
            vendor_name=vendor_name, db_user=db_user, db_password=db_password, db_host=db_host,
            default_user=default_user, default_password=default_password, fqdn=fqdn))

    command_exec.call ("bash %s/install-docker.sh" % get_misc_dir())

    mgmt_cluster_create(default_user, default_password, master_fqdn, cluster_name)


def main():
    args = _parse_args()
    setup_logs('/var/log/pf9/management.log')
    with open("/etc/pf9/pf9-config.yaml", 'r') as stream:
        conf = yaml.load(stream)

    print "Configuring application %s " % conf['app_config']['vendor_name']

    _run_setupd(
        conf['app_config']['vendor_name'],
        conf['sys_config']['db_user'],
        conf['sys_config']['db_host'],
        conf['sys_config']['db_password'],
        conf['sys_config']['default_user'],
        conf['sys_config']['default_password'],
        conf['sys_config']['mgmt_fqdn'],
        conf['sys_config']['default_cluster'],
        conf['sys_config']['master_fqdn']
    )


if __name__ == '__main__':
    try:
        main()
        print "Done"
    except Exception as ex:
        print "Operation failed"
        LOG.exception(ex)
        LOG.critical('Really bad things happened: %s', str(ex))
        sys.exit(1)
