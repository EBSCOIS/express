#!/opt/pf9/setupd/bin/python2
# Copyright (c) 2018 Platform9 Systems

# A script that reads the required configuration files and
# prepares the host by adding it to the default Cluster


import argparse, sys, logging
import yaml, time
from setupd_samples.utils import command_exec
from setupd_samples.utils.add_etc_hosts import add_hosts_entry
from setupd_samples.utils import setup_logs
from setupd_samples.utils.pf9_master_setup import configure_master

LOG = logging.getLogger(__name__)


def _parse_args():
    ap = argparse.ArgumentParser(sys.argv[0],
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    ap.add_argument('--mgmt-ip', required=True, dest='mgmt_ip',
                    help='IP address of the management server')
    return ap.parse_args()


def _add_master(mgmt_fqdn, mgmt_ip, admin_user, admin_password, default_cluster):

    print "Turning off swap"
    command_exec.call("swapoff -a")

    print "Adding DNS entry"
    add_hosts_entry(mgmt_ip, mgmt_fqdn)

    configure_master(mgmt_fqdn, admin_user, admin_password, default_cluster)

def _add_application(application_yaml):
    print "Installing %s " % application_yaml
    time.sleep(120)
    command_exec.call("/opt/pf9/pf9-kube/bin/kubectl --kubeconfig=/etc/pf9/kube.d/kubeconfigs/admin.yaml --context=default-context create -f %s" % application_yaml)
    print "Application installation done"

def main():
    args = _parse_args()
    setup_logs('/var/log/pf9/master.log')
    with open("/etc/pf9/pf9-config.yaml", 'r') as stream:
        conf = yaml.load(stream)

    print "Configuring application %s " % conf['app_config']['vendor_name']

    _add_master(conf['sys_config']['mgmt_fqdn'],
                args.mgmt_ip,
                conf['sys_config']['default_user'],
                conf['sys_config']['default_password'],
                conf['sys_config']['default_cluster'])

    _add_application(conf['app_config']['vendor_yaml'])


if __name__ == '__main__':
    try:
        main()
        print "Done"
    except Exception as ex:
        print "Operation failed"
        LOG.exception(ex)
        LOG.critical('Really bad things happened: %s', str(ex))
        sys.exit(1)

