# Copyright (c) Platform9 systems. All rights reserved

# this was in utils. But that imports hosts.authorize, which means you can't use retry from that module
# (a general utilities module should not be importing something as complex and specific as host.authorize)

# NOTE: Use this version. The copy in utils.py will be phased out.

import time


# Retry decorator
def retry(max_wait=540, interval=5, is_ready=lambda r: r, log=None, tolerate_exceptions=True):
    """
    Retries a function until is_ready(result) returns True, or we hit max_wait.
    """
    def _retry(fun):

        def newfun(*args, **kwargs):
            wait_time = 0
            while True:
                try:
                    result = fun(*args, **kwargs)
                    ready = is_ready(result)
                except Exception as e:
                    ready = False
                    if tolerate_exceptions:
                        if log:
                            log.warning('retry: Exception running %s: %s' % (fun, e))
                    else:
                        if log:
                            log.error('retry: Exception running %s: %s' % (fun, e))
                        raise e
                if ready:
                    if log:
                        log.info("Task completed after %d seconds" % wait_time)
                    return result
                elif wait_time > max_wait:
                    raise RuntimeError("Task timed out after %d seconds" % max_wait)
                else:
                    if log:
                        log.debug("Task is still not ready after %d seconds" % wait_time)
                    wait_time += interval
                    time.sleep(interval)

        return newfun
    return _retry
