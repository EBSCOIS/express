#!/usr/bin/env python
# Copyright (c) 2018 Platform9 Systems

import docker
import argparse, sys, logging, os, subprocess
import json
from setupd_samples.utils import command_exec

LOG = logging.getLogger(__name__)
image2tags = {}

def _setup_logs():
    root = logging.getLogger()
    root.setLevel(logging.DEBUG)

    ch = logging.FileHandler('/var/log/pf9-image-man.log')
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(message)s')
    ch.setFormatter(formatter)
    root.addHandler(ch)


def _parse_args():
    ap = argparse.ArgumentParser(sys.argv[0],
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    sp = ap.add_subparsers(dest='subparser')
    _add_export_images_subparser(sp)
    _add_import_images_subparser(sp)
    return ap.parse_args()


def _add_export_images_subparser(sp):
    sp_export_images = sp.add_parser('export-images', help='Export images')
    sp_export_images.add_argument('--dir', dest='dir', required=True, help='Export destination')


def _add_import_images_subparser(sp):
    sp_import_images = sp.add_parser('import-images', help='Import images')
    sp_import_images.add_argument('--dir', dest='dir', required=True, help='Export destination')

def _download_images_subparser(sp):
    sp_download_images = sp.add_parser('download-images', help="Download images")
    sp_download_images.add_argument('--d')

def save_all_images(dir_name):
    client = docker.from_env(version='auto')
    save_images(dir_name, client.images.list(filters={'dangling': False}))

def _save_image_metadata(dir_name, images):
    client = docker.from_env(version='auto')
    for image in images:
        refreshed_image_obj = client.images.get(image.id)
        image2tags[image.id] = refreshed_image_obj.tags
    print "Saving image metadata "
    f = open(dir_name+'/image-metadata.json', 'w')
    f.write(json.dumps(image2tags))
    f.close()

def save_images(dir_name, images):
    print "Saving images:"
    file_name = dir_name + "/" + "images.tar"
    image_ids = []
    for image in images:
        image_ids.append(image.id)
    command_exec.call("docker save -o %s  %s" % (file_name, ' '.join(image_ids)))
    _save_image_metadata(dir_name, images)


def delete_images(images):
    client = docker.from_env(version='auto')
    for image in images:
        client.images.remove(image=image.id, force=True)

def import_all_images(dir_name):
    for file in os.listdir(dir_name):
        if file.endswith(".tar"):
            file_to_import = os.path.join(dir_name, file)
            LOG.info("Importing file %s" % file_to_import)
            sys.stdout.write('.')
            sys.stdout.flush()
            command_exec.call("docker load -i %s" % file_to_import)
    print " import done"
    _read_image_metadata(dir_name)

def _read_image_metadata(dir_name):
    client = docker.from_env(version='auto')
    print "Reading image metadata"
    with open(dir_name+'/image-metadata.json', 'r') as f:
        data = json.load(f)

    for id,value in data.iteritems():
        _tag_image(client, id, value)

def pull_images(images):
    '''
    Download images from the (public) url,
    if private is needed the user needs to use
    docker login first
    :param images:
    :return:
    '''
    client = docker.from_env(version='auto')
    for img in images:
        client.images.pull(img)

def _get_repo_tag(tag):
    repo, tags = tag.split(':')
    return repo, tags

def _tag_image(client, id, tags):
    try:
        image = client.images.get(id)
        for tag in tags:
            repo, tag = _get_repo_tag(tag)
            LOG.info("Tagging repo %s with tag %s" %(repo, tag))
            image.tag(repo, tag)
    except docker.errors.ImageNotFound as ex:
        # Ignore and move forward
        LOG.exception(ex)


def main():
    _setup_logs()
    args = _parse_args()

    if args.subparser == 'export-images':
        if not os.path.exists(args.dir):
            os.makedirs(args.dir)
        save_all_images(args.dir)

    elif args.subparser == 'import-images':

        if not os.path.exists(args.dir):
            os.makedirs(args.dir)
        import_all_images(args.dir)

    print "Done"

if __name__ == '__main__':
    try:
        main()
        print "Done"
    except Exception as ex:
        print "Operation failed"
        LOG.exception(ex)
        LOG.critical('Really bad things happened: %s', str(ex))
        sys.exit(1)
