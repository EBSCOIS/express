# Copyright (c) Platform9 systems. All rights reserved

import logging
import os
import base64,json, re
from requests import Session

import dict_utils
import request_utils
from retry import retry

log = logging.getLogger(__name__)


class Qbert(object):
    def __init__(self, token, api_url):
        if not (token and api_url):
            raise ValueError('need a keystone token and API url')
        if api_url[-1] == '/':
            raise ValueError('API url must not have trailing slash')
        self.api_url = api_url
        self.session = Session()
        self.session.headers = {'X-Auth-Token': token,
                                'Content-Type': 'application/json'}

    def _make_req(self, endpoint, method='GET', body={}):
        return request_utils.make_req(self.session, self.api_url + endpoint,
                                      method, body)

    def get_cloud_provider_regions(self, uuid):
        log.info('Getting cloud provider region info for: %s', uuid)
        endpoint = '/cloudProviders/{0}'.format(uuid)
        resp = self._make_req(endpoint)
        return resp.json()

    def get_cloud_provider_region_info(self, uuid, region):
        log.info('Getting cloud provider region info for: %s', uuid)
        endpoint = '/cloudProviders/{0}/region/{1}'.format(uuid, region)
        resp = self._make_req(endpoint)
        return resp.json()

    def delete_cloud_provider(self, uuid):
        endpoint = '/cloudProviders/{0}'.format(uuid)
        method = 'DELETE'
        self._make_req(endpoint, method)

    def create_aws_cloud_provider(self, name='aws-1'):
        aws_key = os.environ['HYBRID_ACCESS_KEY']
        aws_secret = os.environ['HYBRID_ACCESS_SECRET']
        endpoint = '/cloudProviders'
        method = 'POST'
        body = {'name': name, 'type': 'aws',
                'key': aws_key,
                'secret': aws_secret}
        resp = self._make_req(endpoint, method, body)
        uuid = resp.json()['uuid']
        return uuid

    def list_cloud_providers(self):
        log.info('Listing Cloud Providers')
        endpoint = '/cloudProviders'
        resp = self._make_req(endpoint)
        return resp.json()

    def list_cloud_provider_types(self):
        log.info('Listing Cloud Provider Types')
        endpoint = '/cloudProvider/types'
        resp = self._make_req(endpoint)
        return resp.json()

    def list_nodepools(self):
        log.info('Listing node pools')
        endpoint = '/nodePools'
        resp = self._make_req(endpoint)
        return dict_utils.keyed_list_to_dict(resp.json(), 'name')

    def list_nodes(self):
        log.info('Listing nodes')
        endpoint = '/nodes'
        resp = self._make_req(endpoint)
        return dict_utils.keyed_list_to_dict(resp.json(), 'name')

    def list_nodes_by_uuid(self):
        log.info('Listing nodes')
        endpoint = '/nodes'
        resp = self._make_req(endpoint)
        return dict_utils.keyed_list_to_dict(resp.json(), 'uuid')

    def list_clusters(self):
        log.info('Listing clusters')
        endpoint = '/clusters'
        resp = self._make_req(endpoint)
        return dict_utils.keyed_list_to_dict(resp.json(), 'name')

    def list_clusters_by_uuid(self):
        log.info('Listing clusters')
        endpoint = '/clusters'
        resp = self._make_req(endpoint)
        return dict_utils.keyed_list_to_dict(resp.json(), 'uuid')

    def update_cluster(self, uuid, body):
        log.info('Updating cluster: %s', uuid)
        endpoint = '/clusters/' + uuid
        method = 'PUT'
        self._make_req(endpoint, method, body)

    def create_cluster(self, body):
        log.info('Creating cluster %s', body['name'])
        endpoint = '/clusters'
        method = 'POST'
        resp = self._make_req(endpoint, method, body)
        uuid = resp.json()['uuid']
        return uuid

    def get_cluster_by_uuid(self, uuid):
        log.info('Get cluster')
        endpoint = '/clusters/%s' % uuid
        resp = self._make_req(endpoint)
        return resp.json()

    def delete_cluster_by_uuid(self, uuid):
        log.info('Deleting cluster %s', uuid)
        endpoint = '/clusters/{0}'.format(uuid)
        method = 'DELETE'
        self._make_req(endpoint, method)

    def delete_cluster(self, name):
        log.info('Deleting cluster %s', name)
        clusteruuid = self.list_clusters()[name]['uuid']
        endpoint = '/clusters/{0}'.format(clusteruuid)
        method = 'DELETE'
        self._make_req(endpoint, method)

    def attach_nodes(self, node_names, cluster_name):
        log.info('Attaching nodes %s to cluster %s', node_names, cluster_name)
        nodes = self.list_nodes()
        node_uuids = node_names
        cluster_uuid = self.list_clusters()[cluster_name]['uuid']
        endpoint = '/clusters/{0}/attach'.format(cluster_uuid)
        method = 'POST'
        body = node_uuids
        self._make_req(endpoint, method, body)

    def detach_node(self, nodeName, clusterName):
        log.info('Detaching node %s from cluster %s', nodeName, clusterName)
        nodeUuid = self.list_nodes()[nodeName]['uuid']
        endpoint = '/nodes/{0}'.format(nodeUuid)
        method = 'PUT'
        body = {'clusterUuid': None}
        self._make_req(endpoint, method, body)

    def get_cluster(self, name):
        log.info('Getting cluster %s', name)
        clusters = self.list_clusters()
        log.info('list_clusters output: %s', clusters)
        clusteruuid = clusters[name]['uuid']
        endpoint = '/clusters/{0}'.format(clusteruuid)
        resp = self._make_req(endpoint)
        return resp.json()

    def get_masterIp(self, clusterName):
        log.info('Getting masterIp for cluster %s', clusterName)
        return self.get_cluster(clusterName)['masterIp']

    def encode_user_pass(self, user, password):
        tokenTemplate = {"username": user, "password": password}
        return base64.b64encode(json.dumps(tokenTemplate))

    def replace_token(self, kconfig, user, password):
        return re.sub('__INSERT_BEARER_TOKEN_HERE__', self.encode_user_pass(user, password), kconfig)

    def get_kubeconfig(self, clusterName, user, password):
        log.info('Getting kubeconfig for cluster %s', clusterName)
        clusterUuid = self.list_clusters()[clusterName]['uuid']
        endpoint = '/kubeconfig/{0}'.format(clusterUuid)
        resp = self._make_req(endpoint)
        return self.replace_token(resp.text, user, password)

    def get_kubelog(self, nodeName):
        log.info('Requesting kube.log from node %s', nodeName)
        nodeUuid = self.list_nodes()[nodeName]['uuid']
        endpoint = '/logs/{0}'.format(nodeUuid)
        resp = self._make_req(endpoint)
        return resp.text

    def get_cli_token(self, cluster_uuid):
        log.info('Getting cli token for cluster %s', cluster_uuid)
        endpoint = '/webcli/{0}'.format(cluster_uuid)
        method = 'POST'
        resp = self._make_req(endpoint, method)
        return resp.json()['token']

    def trigger_omniupgrade(self):
        log.info('Triggering omniupgrade')
        endpoint = '/omniupgrade'
        method = 'POST'
        return self._make_req(endpoint, method)

    def upgrade_cluster(self, uuid):
        log.info('Upgrading cluster %s', uuid)
        endpoint = '/clusters/{0}/upgrade'.format(uuid)
        method = 'POST'
        return self._make_req(endpoint, method)


if __name__ == '__main__':
    import sys
    ch = logging.StreamHandler(sys.stdout)
    log.addHandler(ch)
    log.setLevel(logging.DEBUG)
    token = os.getenv('TOKEN')
    api_url = os.getenv('QBERT_API_URL')
    q = Qbert(token, api_url)
    q.create_cluster('qbert-py-test', 'defaultPool',
                     '10.98.0.0/16', '10.99.0.0/16')
    q.delete_cluster('test')
