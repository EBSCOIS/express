
import logging
import mock

from firkinize.database.mysqldb import MySqlDatabase
from firkinize.tests import BaseTestCase

LOG = logging.getLogger(__name__)

class TestMySqlDb(BaseTestCase):

    def setUp(self):
        super(TestMySqlDb, self).setUp()
        self._connect = self._patchfun('MySQLdb.connect')
        self._connection = conn = mock.Mock()
        self._connect.return_value = self._connection
        self._cursor = mock.Mock()
        conn.cursor.return_value = self._cursor
        self._db = MySqlDatabase(host='host', port=1234,
                                 admin_user='user', admin_pass='passwd')

    def test_create_not_there(self):
        self._cursor.fetchall.return_value = ()
        self.assertTrue(self._db.check_create_db('junk'))
        self._cursor.execute.assert_any_call('CREATE DATABASE junk')
        self._cursor.close.assert_called()

    def test_create_already_there(self):
        self._cursor.fetchall.return_value = ('junk')
        self.assertFalse(self._db.check_create_db('junk'))
        self.assertNotIn(mock.call('CREATE DATABASE junk'),
                         self._cursor.execute.mock_calls)
        self._cursor.close.assert_called()

    def test_grant_not_there(self):
        self._cursor.fetchall.side_effect = [
            # get the hostname from mysql
            [['host']],
            # show grants for 'localhost', '%' and hostname, before, drain the
            # cursor, and then after
            [], [], [['GRANT...']],
            [], [], [['GRANT...']],
            [], [], [['GRANT...']]
        ]
        # check return value
        self.assertTrue(self._db.check_add_grants('name', 'user', 'pass'))

    def test_grant_one_needed(self):
        self._cursor.fetchall.side_effect = [
            # get the hostname from mysql
            [['host']],
            # show grants for 'localhost', '%' and hostname, before, drain the
            # cursor, and then after
            [['GRANT...']], [], [['GRANT...']],
            [], [], [['GRANT...']],
            [['GRANT...']], [], [['GRANT...']]
        ]
        # check return value
        self.assertTrue(self._db.check_add_grants('name', 'user', 'pass'))
