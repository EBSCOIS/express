# Copyright (c) 2018 Platform9 systems. All rights reserved

import yaml
import json
import time
import logging
from docker import get_image_metatada
from api import DeccoApi
LOG = logging.getLogger(__name__)


# Returns a dictionary of container image info and
# a dictionary of app descriptors (see get_app_metadata) from a
# container_images.yaml file.
# app descriptors are read from each image's app_metadata label.
# An image can declare multiple apps. App names must be unique across images.
def get_images_and_apps_from_manifest(path, registry_fqdn,
                                      auth_user, auth_pwd):
    apps = {}
    images = {}
    with open(path) as f:
        d = yaml.load(f)
        d = d['images']
        for img_name, img_val in d.items():
            tag = img_val['tag']
            image_uri = '%s/%s:%s' % (registry_fqdn, img_name, tag)
            images[img_name] = {
                'tag': tag,
                'uri': image_uri
            }
            app_list = get_app_metatada(registry_fqdn, auth_user, auth_pwd,
                                        img_name, img_val['tag'])
            for app in app_list:
                app_name = app['name']
                if app_name in apps:
                    raise RuntimeError('duplicate app name: %s' % app_name)
                apps[app_name] = app
                app['image_uri'] = image_uri
                if 'egresses' not in app:
                    app['egresses'] = []

    return images, apps


# Returns a container image's app_metadata label.
# It is a list of app descriptors.
# Each descriptor specifies several of the following:
# - name: app name
# - command: optional app command line arguments
#   (taken from container default if omitted)
# - endpoints
# - egresses (note: egresses for consul and mysql are automatically added
#             by runtime system so they don't need to be declared here)
# - logfiles
def get_app_metatada(registry_fqdn, auth_user, auth_pwd, img_name, img_tag):
    m = get_image_metatada(registry_fqdn, auth_user,
                           auth_pwd, img_name, img_tag)
    c = m.get('config')
    if not c:
        raise RuntimeError('image metadata missing expected config field')
    l = c.get('Labels')
    if not l:
        raise RuntimeError('image config missing expected Labels field')
    apm = l.get('com.platform9.app_metadata')
    if not apm:
        raise RuntimeError('image %s missing com.platform9.app_metadata label' %
                           img_name)
    return json.loads(apm)


def _get_egresses(app_to_consul_secret_name,
                  app_to_mysql_secret_name,
                  commonsvcs_space_name,
                  springboard_delay_seconds=0):
    obj = [
        {
            'endpoint': 'consul',
            'spaceName': commonsvcs_space_name,
            'localPort': 8500,
            'certAndCaSecretName': app_to_consul_secret_name
        },
        {
            'endpoint': 'mysql',
            'localPort': 3306,
            'certAndCaSecretName': app_to_mysql_secret_name
        },
    ]
    if springboard_delay_seconds:
        obj[0]['springBoardDelaySeconds'] = springboard_delay_seconds
        obj[1]['springBoardDelaySeconds'] = springboard_delay_seconds
    return obj


# Calls a container image's init-region entry point to initialize
# the persistent state for all apps belonging to this image.
def init_region(namespace, app_name, image_uri,
                customer_uuid, region_uuid,
                img_pull_secr_name, app_to_consul_secret_name,
                app_to_mysql_secret_name, commonsvcs_space_name,
                springboard_delay_seconds=0,
                ):
    name = app_name + '-init'
    dapi = DeccoApi()
    try:
        dapi.get_app(name, namespace)
        LOG.info('%s already exists' % name)
        return None
    except:
        LOG.info('creating %s because not present' % name)

    config_url = "http://127.0.0.1:8500"
    # if init-region succeeds, connect to ports 6789 and 6790 to make
    # springboard terminate stunnel proxies to allow job to complete
    bash_cmd = '/root/init-region --config-url %s --customer-id %s --region-id %s && ( while ! exec 3<>/dev/tcp/localhost/6789 ; do echo waiting for 6789 ; sleep 2; done; while ! exec 4<>/dev/tcp/localhost/6790 ; do echo waiting for 6790; sleep 2; done )' % (
        config_url, customer_uuid, region_uuid
    )
    cmd = ["/bin/bash", "-c", bash_cmd]
    spec = {
        'initialReplicas': 1,
        'runAsJob': True,
        'egresses': _get_egresses(app_to_consul_secret_name,
                                  app_to_mysql_secret_name,
                                  commonsvcs_space_name,
                                  springboard_delay_seconds),
        'pod': {
            'restartPolicy': 'OnFailure',
            'containers': [
                {
                    'name': 'init-region',
                    'image': image_uri,
                    'command': cmd
                }
            ],
            'imagePullSecrets': [
                {
                    'name': img_pull_secr_name
                }
            ]
        }
    }
    for i in range(5):
        try:
            time.sleep(2)
            dapi.create_app(name, spec, namespace)
            LOG.info('successfully created %s app' % name)
            return name
        except:
            LOG.info("failed to create %s app, may retry..." % name)
    raise Exception('failed to create app-init app')


# Starts an app. Assumes that init_region() was called for the app's container
def start_app(namespace, app_name, image_uri, customer_uuid, region_uuid,
              img_pull_secr_name, app_to_consul_secret_name,
              app_to_mysql_secret_name, endpoints, egresses,
              commonsvcs_space_name,
              springboard_delay_seconds=0,
              securityContext=None,
              command=None,
              volumes=None,
              volumeMounts=None,
              affinity=None
              ):

    dapi = DeccoApi()
    try:
        dapi.get_app(app_name, namespace)
        LOG.info('%s already exists' % app_name)
        return None
    except:
        LOG.info('creating %s because not present' % app_name)

    config_url = "http://127.0.0.1:8500"
    config_host_and_port = "127.0.0.1:8500"
    unique_ports = set()
    ports = []
    for e in endpoints:
        port = e['port']
        if port not in unique_ports:
            unique_ports.add(port)
            ports.append({'containerPort': port})
    default_egresses = _get_egresses(app_to_consul_secret_name,
                                     app_to_mysql_secret_name,
                                     commonsvcs_space_name,
                                     springboard_delay_seconds)
    spec = {
        'initialReplicas': 1,
        'egresses': default_egresses + egresses,
        'endpoints': endpoints,
        'pod': {
            'containers': [
                {
                    'name': app_name,
                    'image': image_uri,
                    'env': [
                        {
                            'name': 'CONFIG_URL',
                            'value': config_url
                        },
                        {
                            'name': 'CONSUL_HTTP_TOKEN',
                            'value': 'dummy'
                        },
                        {
                            'name': 'CONFIG_HOST_AND_PORT',
                            'value': config_host_and_port
                        },
                        {
                            'name': 'CUSTOMER_ID',
                            'value': customer_uuid
                        },
                        {
                            'name': 'REGION_ID',
                            'value': region_uuid
                        },
                    ],
                    'ports': ports
                }
            ],
            'imagePullSecrets': [
                {
                    'name': img_pull_secr_name
                }
            ]
        }
    }
    if command:
        spec['pod']['containers'][0]['command'] = command
    if securityContext:
        spec['pod']['containers'][0]['securityContext'] = securityContext
    if volumeMounts:
        spec['pod']['containers'][0]['volumeMounts'] = volumeMounts
    if volumes:
        spec['pod']['volumes'] = volumes
    if affinity:
        spec['pod']['affinity'] = affinity

    for i in range(5):
        try:
            time.sleep(2)
            dapi.create_app(app_name, spec, namespace)
            LOG.info('successfully created app %s' % app_name)
            return
        except Exception:
            LOG.exception("failed to create app %s, may retry..." % app_name)
    raise Exception('failed to create app app')
