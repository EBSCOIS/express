# Copyright (c) 2018 Platform9 systems. All rights reserved

from apps import init_region, start_app
import requests
import json

# delay the start of stunnel proxies (and therefore availability of consul
# and mysql) to test the resilience and self-healing
# capabilities of keystone's init-region and main services
SPRINGBOARD_DELAY_SECONDS = 5


# Calls init_region with the specified keystone container image
def init_keystone(name, namespace,
                  keystone_image_uri, customer_uuid, region_uuid,
                  img_pull_secr_name, keystone_to_consul_secret_name,
                  keystone_to_mysql_secret_name,
                  commonsvcs_space_name):

    return init_region(namespace, name, keystone_image_uri,
                       customer_uuid, region_uuid, img_pull_secr_name,
                       keystone_to_consul_secret_name,
                       keystone_to_mysql_secret_name,
                       commonsvcs_space_name,
                       springboard_delay_seconds=SPRINGBOARD_DELAY_SECONDS)


# Starts the keystone app in the specified namespace.
# Assumes init_keystone() was previously called with the same image.
def start_keystone(namespace, keystone_image_uri, customer_uuid, region_uuid,
                   img_pull_secr_name, keystone_to_consul_secret_name,
                   keystone_to_mysql_secret_name, endpoints,
                   commonsvcs_space_name):
    start_app(namespace, 'keystone', keystone_image_uri,
              customer_uuid, region_uuid, img_pull_secr_name,
              keystone_to_consul_secret_name,
              keystone_to_mysql_secret_name,
              endpoints, [],
              commonsvcs_space_name,
              springboard_delay_seconds=SPRINGBOARD_DELAY_SECONDS)


def login(url, username, password, tenant):
    """
    Login using username/password on a tenant
    FIXME: shamelessly copied from pf9-main/tools/pf9lab/pf9lab/du/auth.py
    """
    data = {
        "auth": {
            "tenantName": tenant,
            "passwordCredentials": {
            "username": username,
            "password": password
            }
        }
    }
    r = requests.post(''.join([url, '/keystone/v2.0/tokens']),
                      json.dumps(data),
                      verify=False,
                      headers={'Content-Type': 'application/json'})
    if r.status_code != 200 :
        raise Exception("keystone login returned %d, body:%s" %
                (r.status_code, r.text))
    else :
        return r.json()


