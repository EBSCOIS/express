# Copyright (c) 2017 Platform9 systems. All rights reserved

# pylint disable=no-member

import mock
from unittest import TestCase
from firkinize.schema.entity import (Entity,
                                     EntityList,
                                     nodify,
                                     load,
                                     merge)

class TestEntity(TestCase):

    def test_one_object(self):
        root = Entity()
        root.foo = 'foo'
        root.bar = 'bar'
        kvdict = root.to_kv(recurse=True)
        expected_kv = {
            '_type': 'firkinize.schema.entity.Entity',
            'foo': 'foo',
            'bar': 'bar'
        }
        self.assertEqual(expected_kv, kvdict)

        newroot = load(kvdict)
        self.assertTrue(type(newroot), Entity)
        self.assertEqual(newroot.foo.key, root.foo.key)
        self.assertEqual(newroot.bar.key, root.bar.key)
        self.assertEqual(newroot.foo.value, root.foo.value)
        self.assertEqual(newroot.bar.value, root.bar.value)

    def test_list(self):
        root = Entity()
        root.items = EntityList()
        ids = []
        for i in range(10):
            newid = root.items.append(Entity(value=i))
            self.assertEqual(root.items[newid].key, newid)
            self.assertEqual(root.items[newid].value, i)
            ids.append(newid)
        self.assertItemsEqual(ids, root.items.keys())

        values = [e.value for e in root.items.values()]
        self.assertItemsEqual(values, range(10))

        expected_kv = {'_type': 'firkinize.schema.entity.Entity',
                       'items/_type': 'firkinize.schema.entity.EntityList'}
        for i in range(10):
            expected_kv.update({'items/%s' % ids[i]: i})

        kvdict = root.to_kv(recurse=True)
        self.assertDictEqual(expected_kv, kvdict)

    def test_tree(self):
        root = Entity()

        root.obj1 = Entity()
        root.obj1.attr1 = 'foo1'
        root.obj1.attr2 = 'foo2'

        root.list2 = EntityList()
        li1 = Entity()
        li1.bar = 'bar'
        id1 = root.list2.append(li1)

        # check KV
        kvdict = root.to_kv(recurse=True)
        expected_kv = {
            '_type': 'firkinize.schema.entity.Entity',
            'list2/%s/_type' % id1: 'firkinize.schema.entity.Entity',
            'list2/%s/bar' % id1: 'bar',
            'list2/_type': 'firkinize.schema.entity.EntityList',
            'obj1/_type': 'firkinize.schema.entity.Entity',
            'obj1/attr1': 'foo1',
            'obj1/attr2': 'foo2'
        }
        self.assertEqual(expected_kv, kvdict)

        # collate KVs into a tree of dicts
        nodes = nodify(kvdict)
        expected_nodes = {
            '_type': 'firkinize.schema.entity.Entity',
            'list2': {
                '_type': 'firkinize.schema.entity.EntityList',
                id1: {
                    '_type': 'firkinize.schema.entity.Entity',
                    'bar': 'bar'
                }
            },
            'obj1': {
                '_type': 'firkinize.schema.entity.Entity',
                'attr1': 'foo1',
                'attr2': 'foo2'
            }
        }
        self.assertEqual(expected_nodes, nodes)

        # check full deserialize from KV
        newroot = load(kvdict)
        self.assertEqual(newroot.obj1.attr1.key, 'attr1')
        self.assertEqual(newroot.obj1.attr1.value, 'foo1')
        self.assertEqual(newroot.obj1.attr2.key, 'attr2')
        self.assertEqual(newroot.obj1.attr2.value, 'foo2')
        self.assertEqual(newroot.list2.key, 'list2')
        self.assertEqual(newroot.list2.keys(), [id1])
        self.assertEqual(newroot.list2[id1].key, id1)
        self.assertEqual(newroot.list2[id1].bar.value, 'bar')

        # make sure the KV generation works on the deserialized model
        newkv = newroot.to_kv(recurse=True)
        self.assertEqual(newkv, kvdict)

    def test_merge_to_empty(self):
        source = Entity()
        source.list_ = EntityList()
        source.list_.append(Entity(value=1))
        source.list_.append(Entity(value=2))
        source.object_ = Entity()
        source.object_.attr1 = 3
        source.object_.attr2 = 4
        dest = Entity()
        merge(dest, source)
        self.assertEqual(source, dest)

    def test_merge_overwrite_attrs(self):
        source = Entity()
        source.list_ = EntityList()
        source.list_[1] = Entity(value=1)
        source.list_[2] = Entity(value=2)
        source.object_ = Entity()
        source.object_.attr1 = 3
        source.object_.attr2 = 4
        dest = Entity()
        dest.list_ = EntityList()
        dest.list_[1] = Entity(value=5)
        dest.list_[2] = Entity(value=6)
        dest.object_ = Entity()
        dest.object_.attr1 = 7
        dest.object_.attr2 = 8
        merge(dest, source)
        self.assertEqual(source, dest)

    def test_merge_different_structures(self):
        source = Entity()
        source.list1 = EntityList()
        listid1 = source.list1.append(Entity(value=1))
        source.attr1 = Entity(value=3)
        source.object1 = Entity()
        source.object1.attr11 = Entity(value=5)

        dest = Entity()
        dest.list2 = EntityList()
        listid2 = dest.list2.append(Entity(value=2))
        dest.attr2 = Entity(value=4)
        dest.object2 = Entity()
        dest.object2.attr22 = Entity(value=6)

        merge(dest, source)

        expected = Entity()
        expected.list1 = EntityList()
        expected.list1[listid1] = Entity(value=1)
        expected.attr1 = Entity(value=3)
        expected.object1 = Entity()
        expected.object1.attr11 = Entity(value=5)

        expected.list2 = EntityList()
        expected.list2[listid2] = Entity(value=2)
        expected.attr2 = Entity(value=4)
        expected.object2 = Entity()
        expected.object2.attr22 = Entity(value=6)

        self.assertEqual(dest, expected)

    def test_load_object_into_entity(self):
        kv = {
            '_type': 'firkinize.schema.entity.Entity',
            'obj/_type': 'firkinize.schema.entity.Entity',
            'obj/attr1': 'foo1',
            'obj/attr2': 'foo2'
        }

        root = Entity()
        root.obj = Entity()
        configstore = mock.Mock()
        configstore.kv_get_prefix = mock.Mock()
        configstore.kv_get_prefix.return_value = kv
        root.obj.load(configstore)
        self.assertEqual('foo1', root.obj.attr1.value)
        self.assertEqual('foo2', root.obj.attr2.value)

    def test_load_list_into_entity(self):
        kv = {
            '_type': 'firkinize.schema.entity.Entity',
            'list_/_type': 'firkinize.schema.entity.EntityList',
            'list_/1234/_type': 'firkinize.schema.entity.Entity',
            'list_/5678/_type': 'firkinize.schema.entity.Entity',
            'list_/1234/foo': 'foo',
            'list_/1234/bar': 'bar',
            'list_/5678/bung': 'bung',
        }
        root = Entity()
        root.list_ = EntityList()
        configstore = mock.Mock()
        configstore.kv_get_prefix = mock.Mock()
        configstore.kv_get_prefix.return_value = kv
        root.list_.load(configstore)
        self.assertEqual('foo', root.list_['1234'].foo.value)
        self.assertEqual('bar', root.list_['1234'].bar.value)
        self.assertEqual('bung', root.list_['5678'].bung.value)

