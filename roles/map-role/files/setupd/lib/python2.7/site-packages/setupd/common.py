from iniparse import RawConfigParser
from functools import wraps
import os
import yaml
import tempfile
import shutil
import warnings

PF9_CONF_DIR = os.getenv('PF9_CONF_DIR', '/etc/pf9')
GLOBAL_VARS_FILE = PF9_CONF_DIR + '/global_vars.yml'
CREDS_FILE = PF9_CONF_DIR + '/creds.yaml'
STATE_FILE = PF9_CONF_DIR + '/state.yaml'

__MEMO_REGISTRY = {}

def memoize_me(name):
    def _decorator(func):
        @wraps(func)
        def _wrapper(*largs, **kwargs):
            global __MEMO_REGISTRY
            if name not in __MEMO_REGISTRY:
                __MEMO_REGISTRY[name] = func(*largs, **kwargs)
            return __MEMO_REGISTRY[name]
        return _wrapper
    return _decorator


@memoize_me('release_version')
def get_release_version():
    with open(GLOBAL_VARS_FILE, 'r') as f:
        global_vars = yaml.load(f)
        return global_vars['release_version']


@memoize_me('creds_data')
def get_creds_data():
    with open(CREDS_FILE, 'r') as f:
        creds = yaml.load(f)
        return creds['creds']


def get_conf_section(fname, section):
    rcp = RawConfigParser()
    if fname not in rcp.read(fname):
        return {}
    if not rcp.has_section(section):
        return {}
    return dict(rcp.items(section))


def set_conf_data(fname, section, **kwargs):
    rcp = RawConfigParser()
    rcp.read(fname)
    if not rcp.has_section(section):
        rcp.add_section(section)
    for koption, kval in kwargs.items():
        rcp.set(section, koption, kval)
    tmpf = tempfile.NamedTemporaryFile(delete=False)
    tmpname = tmpf.name
    rcp.write(tmpf)
    tmpf.close()
    shutil.move(tmpname, fname)


def get_state_data():
    if not os.path.exists(STATE_FILE):
        return {}
    with open(STATE_FILE) as f:
        try:
            return yaml.safe_load(f)
        except Exception:
            warnings.warn('Could not parse state YAML')
            return {}


def set_state_data(**data):
    cur_data = get_state_data()
    if 'state' not in cur_data:
        cur_data['state'] = {}
    cur_data['state'].update(data)
    with open(STATE_FILE, 'w') as f:
        yaml.safe_dump(cur_data)


def get_password_types():
    creds = get_creds_data()
    return creds['passwords'].keys()


def get_certificate_types():
    creds = get_creds_data()
    return creds['certs']
