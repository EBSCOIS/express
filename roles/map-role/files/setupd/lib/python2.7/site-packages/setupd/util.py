from subprocess import Popen, PIPE, STDOUT
from tempfile import NamedTemporaryFile
import os
import shutil

__all__ = (
    'checked_local_call',
    'slurp_file',
    'write_out_file'
    )


def checked_local_call(cmd, env=None, log_file=None):
    """
    Run the specified command, raise exception if return code is not 0

    :type cmd: mixed
    :param cmd: command string (or list containing command and arguments)
    :type env: dict
    :param env: Mapping of environment variables to override (the rest are inherited
                from the import current environment)
    :type log_file: str
    :param log_file: log file to redirect output (defaults to sending to stdout/stderr)
    :return: stdout of ran command
    :rtype: str
    """
    environment_map = os.environ.copy()
    if env:
        environment_map.update(env)

    # Open log file if specified, then set the process stdout handle to its file handle
    stdout_hnd = PIPE
    log_fd = None
    if log_file:
        log_fd = open(log_file, mode='a')
        stdout_hnd = log_fd

    p = Popen(cmd, stdout=stdout_hnd, stderr=STDOUT, env=environment_map)
    try:
        p.wait()
    finally:
        if log_fd:
            log_fd.close()

    if p.returncode != 0:
        raise Exception('command %s returned %d' % (' '.join(cmd), p.returncode))

    # stdout not available when redirected to a log file
    if log_file:
        return ''
    else:
        return p.stdout.read()


def slurp_file(fname):
    """
    Read and return full contents of `fname`.

    :type fname: str
    :param fname: Path to file to read in
    :return: file contents
    :rtype: str
    """
    with open(fname, 'r') as f:
        return f.read()


def write_out_file(fname, contents):
    """
    Write the content of `contents` to path `fname`.

    :type fname: str
    :param fname: destination path
    :type contents: str
    :param contents: file contents
    """
    tmpf = NamedTemporaryFile(delete=False)
    tmpname = tmpf.name
    tmpf.write(contents)
    tmpf.close()
    shutil.move(tmpname, fname)
